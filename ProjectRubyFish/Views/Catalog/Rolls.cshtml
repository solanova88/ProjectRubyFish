
<title>Заказ роллов доставка</title>

<h1 align="center">Роллы</h1>
<style>
    .catalog {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        padding: 100px;
        margin-top: 40px;
        flex-wrap: wrap;
    }

    .card {
        background-color: #fff;
        width: 300px;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 3px 5px 10px #434040;
        margin-top: 80px;
        margin: 20px;
        transition: box-shadow 0.2s linear;
        flex-wrap: wrap;
    }

        .card:hover {
            box-shadow: 7px 14px 30px #434040;
        }

    .card-name {
        margin-top: 20px;
        font-size: 14px;
        font-weight: 500;
        text-align: center;
    }

    .card-desc {
        font-size: 12px;
        font-weight: 300;
        margin-top: 20px;
    }

    .card-bottom {
        display: flex;
        flex-wrap: wrap;
        margin-top: 20px;
        justify-content: space-between;
        align-items: center;
    }

    .card-counter {
        display: flex;
        align-items: center;
    }

        .card-counter input {
            font-family: Gilroy-Medium,sans-serif;
            background: none;
            border: 0;
            outline: 0;
            font-size: 18px;
            text-align: center;
            padding: 0 5px;
            width: 29px;
        }

    .button {
        background-color: #305478;
        padding: 3px;
        text-decoration: none;
        color: #eee;
        border-radius: 10px;
        transition: background-color 0.3s linear;
    }

        .button:hover {
            background-color: #00008b;
        }
</style>

<form asp-action="Rolls" asp-controller="Catalog">
    <div class='catalog'>
        @foreach (var roll in Model)
        {
            <div class='card'>
                <div class='card-text'>
                    <div class='card-name' id="name_@roll.Id">@roll.Name</div>
                    <div class='card-desc'>@roll.Description</div>
                </div>
                <div class='card-bottom'>
                    <div class='card-price' id="price_@roll.Id">@roll.Price р</div>
                    <div class='card-counter'>
                        <button class="decrement button" type="button" data-product-id="@roll.Id">
                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-dash" viewBox="0 0 16 16">
                                <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8" />
                            </svg>
                        </button>
                        <input type="text" id="quantity_@roll.Id" readonly value="0" />
                        <button class="increment button" type="button" data-product-id="@roll.Id">
                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</form>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function updateLocalStorage(productId, productName, quantity, price) {

                var order = JSON.parse(localStorage.getItem('order')) || { products: [], totalAmount: 0 };

                // Удаление продукта из массива, если его количество равно 0
                order.products = order.products.filter(product => product.id !== productId);

                // Добавление продукта в массив с учетом его количества
                if (quantity > 0) {
                    order.products.push({
                        id: productId,
                        name: productName,
                        price: price,
                        quantity: quantity
                    });
                }

                // Пересчет общей стоимости заказа
                order.totalAmount = order.products.reduce((total, product) => total + (product.price * product.quantity), 0);

                // Обновление LocalStorage
                localStorage.setItem('order', JSON.stringify(order));
            }

            // Функция для загрузки данных из LocalStorage и установки значений в поля ввода
            document.querySelectorAll(".card-counter input").forEach(input => {
                const productId = input.id.split('_')[1];
                const order = JSON.parse(localStorage.getItem('order')) || { products: [], totalAmount: 0 };
                const product = order.products.find(product => product.id === productId);
                if (product) {
                    input.value = product.quantity || 0;
                }
            });

            // Обработчики событий для кнопок увеличения и уменьшения количества товара
            document.querySelectorAll('.increment').forEach(button => {
                button.addEventListener('click', function () {
                    var productId = this.dataset.productId;
                    var quantityElement = document.getElementById('quantity_' + productId);
                    var quantity = parseInt(quantityElement.value) + 1;
                    quantityElement.value = quantity;

                    // Получаем имя товара из элемента с id, который вы добавили
                    var productNameElement = document.getElementById('name_' + productId);
                    var productName = productNameElement.innerText;

                    // Получаем цену товара из элемента с id, который вы добавили
                    var priceElement = document.getElementById('price_' + productId);
                    var priceText = priceElement.innerText;
                    var priceMatch = priceText.match(/(\d+(\.\d+)?) р/);
                    var price = parseFloat(priceMatch[1]);

                    updateLocalStorage(productId, productName, quantity, price);
                });
            });

            document.querySelectorAll('.decrement').forEach(button => {
                button.addEventListener('click', function () {
                    var productId = this.dataset.productId;
                    var quantityElement = document.getElementById('quantity_' + productId);
                    var quantity = parseInt(quantityElement.value) - 1;
                    quantity = quantity < 0 ? 0 : quantity;
                    quantityElement.value = quantity;

                    // Получаем имя товара из элемента с id, который вы добавили
                    var productNameElement = document.getElementById('name_' + productId);
                    var productName = productNameElement.innerText;

                    // Получаем цену товара из элемента с id, который вы добавили
                    var priceElement = document.getElementById('price_' + productId);
                    var priceText = priceElement.innerText;
                    var priceMatch = priceText.match(/(\d+(\.\d+)?) р/);
                    var price = parseFloat(priceMatch[1]);

                    updateLocalStorage(productId, productName, quantity, price);
                });
            });

        });
    </script>
}
